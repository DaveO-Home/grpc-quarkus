/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables.records


import golf.handicap.generated.tables.Scores

import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ScoresRecord() : TableRecordImpl<ScoresRecord>(Scores.SCORES) {

    open var pin: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    open var grossScore: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var netScore: Float?
        set(value): Unit = set(2, value)
        get(): Float? = get(2) as Float?

    open var adjustedScore: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var teeTime: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var handicap: Float?
        set(value): Unit = set(5, value)
        get(): Float? = get(5) as Float?

    open var courseSeq: Int?
        set(value): Unit = set(6, value)
        get(): Int? = get(6) as Int?

    open var courseTees: Int?
        set(value): Unit = set(7, value)
        get(): Int? = get(7) as Int?

    open var used: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    /**
     * Create a detached, initialised ScoresRecord
     */
    constructor(pin: String? = null, grossScore: Int? = null, netScore: Float? = null, adjustedScore: Int? = null, teeTime: String? = null, handicap: Float? = null, courseSeq: Int? = null, courseTees: Int? = null, used: String? = null): this() {
        this.pin = pin
        this.grossScore = grossScore
        this.netScore = netScore
        this.adjustedScore = adjustedScore
        this.teeTime = teeTime
        this.handicap = handicap
        this.courseSeq = courseSeq
        this.courseTees = courseTees
        this.used = used
        resetChangedOnNotNull()
    }
}
