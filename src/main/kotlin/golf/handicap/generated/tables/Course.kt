/*
 * This file is generated by jOOQ.
 */
package golf.handicap.generated.tables


import golf.handicap.generated.DefaultSchema
import golf.handicap.generated.keys.COURSE__PK_COURSE
import golf.handicap.generated.keys.RATINGS__FK_RATINGS_PK_COURSE
import golf.handicap.generated.keys.SCORES__FK_SCORES_PK_COURSE
import golf.handicap.generated.tables.Ratings.RatingsPath
import golf.handicap.generated.tables.Scores.ScoresPath
import golf.handicap.generated.tables.records.CourseRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Course(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, CourseRecord>?,
    parentPath: InverseForeignKey<out Record, CourseRecord>?,
    aliased: Table<CourseRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<CourseRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>course</code>
         */
        val COURSE: Course = Course()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CourseRecord> = CourseRecord::class.java

    /**
     * The column <code>course.COURSE_SEQ</code>.
     */
    val COURSE_SEQ: TableField<CourseRecord, Int?> = createField(DSL.name("COURSE_SEQ"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>course.COURSE_NAME</code>.
     */
    val COURSE_NAME: TableField<CourseRecord, String?> = createField(DSL.name("COURSE_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>course.COURSE_COUNTRY</code>.
     */
    val COURSE_COUNTRY: TableField<CourseRecord, String?> = createField(DSL.name("COURSE_COUNTRY"), SQLDataType.VARCHAR(128).nullable(false), this, "")

    /**
     * The column <code>course.COURSE_STATE</code>.
     */
    val COURSE_STATE: TableField<CourseRecord, String?> = createField(DSL.name("COURSE_STATE"), SQLDataType.CHAR(2).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<CourseRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<CourseRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<CourseRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>course</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>course</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>course</code> table reference
     */
    constructor(): this(DSL.name("course"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, CourseRecord>?, parentPath: InverseForeignKey<out Record, CourseRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, COURSE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class CoursePath : Course, Path<CourseRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, CourseRecord>?, parentPath: InverseForeignKey<out Record, CourseRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<CourseRecord>): super(alias, aliased)
        override fun `as`(alias: String): CoursePath = CoursePath(DSL.name(alias), this)
        override fun `as`(alias: Name): CoursePath = CoursePath(alias, this)
        override fun `as`(alias: Table<*>): CoursePath = CoursePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<CourseRecord, Int?> = super.getIdentity() as Identity<CourseRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<CourseRecord> = COURSE__PK_COURSE

    private lateinit var _ratings: RatingsPath

    /**
     * Get the implicit to-many join path to the <code>ratings</code> table
     */
    fun ratings(): RatingsPath {
        if (!this::_ratings.isInitialized)
            _ratings = RatingsPath(this, null, RATINGS__FK_RATINGS_PK_COURSE.inverseKey)

        return _ratings;
    }

    val ratings: RatingsPath
        get(): RatingsPath = ratings()

    private lateinit var _scores: ScoresPath

    /**
     * Get the implicit to-many join path to the <code>scores</code> table
     */
    fun scores(): ScoresPath {
        if (!this::_scores.isInitialized)
            _scores = ScoresPath(this, null, SCORES__FK_SCORES_PK_COURSE.inverseKey)

        return _scores;
    }

    val scores: ScoresPath
        get(): ScoresPath = scores()
    override fun `as`(alias: String): Course = Course(DSL.name(alias), this)
    override fun `as`(alias: Name): Course = Course(alias, this)
    override fun `as`(alias: Table<*>): Course = Course(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Course = Course(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Course = Course(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Course = Course(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Course = Course(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Course = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Course = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Course = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Course = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Course = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Course = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Course = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Course = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Course = where(DSL.notExists(select))
}
